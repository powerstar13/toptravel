<?xml version = "1.0" encoding = "UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    @fileName    : ServiceareaGroupMapper.xml
    @author      : 홍준성
    @description : 휴게소 완성 테이블에 대한 SQL문을 정의하기 위한 Mapper 정의
    @lastUpdate  : 2019-05-06
-->

<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace = "ServiceareaGroupMapper">
    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id = "serviceareaGroup" type = "project.spring.travel.model.ServiceareaGroup">
	    <!-- Beans의 멤버변수(property)이름과
	        대상 테이블의 컬럼(column)을 연결한다.
	    -->
	    <result property="servicearea_groupId" column="servicearea_groupId"/>
        <result property="serviceareaName" column="serviceareaName"/>
        <result property="direction" column="direction"/>
        <result property="routeName" column="routeName"/>
        <result property="csStat" column="csStat"/>
        <result property="foodBatchMenu" column="foodBatchMenu"/>
        <result property="foodSalePrice" column="foodSalePrice"/>
        <result property="imageUrl" column="imageUrl"/>
        <result property="imageThumbnailUrl" column="imageThumbnailUrl"/>
        <result property="imageWidth" column="imageWidth"/>
        <result property="imageHeight" column="imageHeight"/>
        <result property="oilCompany" column="oilCompany"/>
        <result property="oilGasolinePrice" column="oilGasolinePrice"/>
        <result property="oilDiselPrice" column="oilDiselPrice"/>
        <result property="oilLpgYn" column="oilLpgYn"/>
        <result property="oilLpgPrice" column="oilLpgPrice"/>
        <result property="placeId" column="placeId"/>
        <result property="placeX" column="placeX"/>
        <result property="placeY" column="placeY"/>
        <result property="placePhone" column="placePhone"/>
        <result property="placeAddress" column="placeAddress"/>
        <result property="placeRoadAddress" column="placeRoadAddress"/>
        <result property="placeUrl" column="placeUrl"/>
        <result property="psName" column="psName"/>
        <result property="themeItemName" column="themeItemName"/>
        <result property="themeDetail" column="themeDetail"/>
        <result property="serviceareaLike" column="serviceareaLike"/>
        <result property="regDate" column="regDate"/>
        <result property="editDate" column="editDate"/>
    </resultMap>

    <!-- ===== 휴게소 완성 정보 업데이트 ===== -->
    <update id = "updateServiceareaGroupByServiceareaName"
            parameterType = "project.spring.travel.model.ServiceareaGroup">
        <!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
        Update servicearea_group 
        Set 
            serviceareaName = #{serviceareaName}, 
            direction = #{direction}, 
            routeName = #{routeName}, 
            csStat = #{csStat}, 
            foodBatchMenu = #{foodBatchMenu}, 
            foodSalePrice = #{foodSalePrice}, 
            imageUrl = #{imageUrl}, 
            imageThumbnailUrl = #{imageThumbnailUrl}, 
            imageWidth = #{imageWidth}, 
            imageHeight = #{imageHeight}, 
            oilCompany = #{oilCompany}, 
            oilGasolinePrice = #{oilGasolinePrice}, 
            oilDiselPrice = #{oilDiselPrice}, 
            oilLpgYn = #{oilLpgYn}, 
            oilLpgPrice = #{oilLpgPrice}, 
            placeId = #{placeId}, 
            placeX = #{placeX}, 
            placeY = #{placeY}, 
            placePhone = #{placePhone}, 
            placeAddress = #{placeAddress}, 
            placeRoadAddress = #{placeRoadAddress}, 
            placeUrl = #{placeUrl}, 
            psName = #{psName}, 
            themeItemName = #{themeItemName}, 
            themeDetail = #{themeDetail}, 
            editDate = now() 
        Where serviceareaName = #{serviceareaName}
    </update>
    
    <!-- ===== 휴게소 완성 정보 저장 -->
    <insert id = "insertServiceareaGroup"
            parameterType = "project.spring.travel.model.ServiceareaGroup"
            useGeneratedKeys = "true"
            keyProperty = "servicearea_groupId">
        <!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
        Insert Into servicearea_group (
            serviceareaName, direction, routeName, csStat, 
            foodBatchMenu, foodSalePrice, 
            imageUrl, imageThumbnailUrl, imageWidth, imageHeight, 
            oilCompany, oilGasolinePrice, oilDiselPrice, oilLpgYn, oilLpgPrice, 
            placeId, placeX, placeY, placePhone, 
            placeAddress, placeRoadAddress, placeUrl, 
            psName, themeItemName, themeDetail, serviceareaLike,
            regDate
        ) Values (
            #{serviceareaName}, #{direction}, #{routeName}, #{csStat}, 
            #{foodBatchMenu}, #{foodSalePrice}, 
            #{imageUrl}, #{imageThumbnailUrl}, #{imageWidth}, #{imageHeight}, 
            #{oilCompany}, #{oilGasolinePrice}, #{oilDiselPrice}, 
            #{oilLpgYn}, #{oilLpgPrice}, 
            #{placeId}, #{placeX}, #{placeY}, #{placePhone}, 
            #{placeAddress}, #{placeRoadAddress}, #{placeUrl}, 
            #{psName}, #{themeItemName}, #{themeDetail}, 0,
            now()
        )
    </insert>
    
    <!-- ===== 휴게소 완성 정보 조회 ===== -->
    <select id = "selectServiceareaGroup"
            parameterType = "project.spring.travel.model.ServiceareaGroup"
            resultMap = "serviceareaGroup">
        <!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
        Select 
            servicearea_groupId, serviceareaName, direction, routeName, 
            csStat, foodBatchMenu, foodSalePrice, 
            imageUrl, imageThumbnailUrl, imageWidth, imageHeight, 
            oilCompany, oilGasolinePrice, oilDiselPrice, oilLpgYn, oilLpgPrice, 
            placeId, placeX, placeY, placePhone, 
            placeAddress, placeRoadAddress, placeUrl, 
            psName, themeItemName, themeDetail, serviceareaLike,
            Date_format(regDate, '%Y-%m-%d ') As `regDate`, 
            Date_format(editDate, '%Y-%m-%d') As `editDate` 
        From servicearea_group 
        Where servicearea_groupId = #{servicearea_groupId}
    </select>
    
    <!--
        ===== 전체 휴게소 수를 구하기 위한 기능 추가 =====
        - 검색 결과가 있는 경우, 페이지 번호는 검색 결과 수에 따라 재구성된다.
            - 이는 전체 게시물의 수를 산출할 때 검색 결과도 반영된다는 의미
        - count, max, sum, min, avg 등의 집계 함수는 리턴값이 숫자 형태이므로,
            resultMap 속성이 아닌 resultType 속성을 통해서 int 형을 명시해야 한다.
    -->
    <select id="selectServiceareaGroupCount"
            parameterType="project.spring.travel.model.ServiceareaGroup"
            resultType="int">
        Select Count(servicearea_groupId)
        From servicearea_group
        
        <where>
            <if test="serviceareaName != null and serviceareaName != ''">
                serviceareaName Like Concat('%', #{serviceareaName}, '%')
            </if>
        </where>
    </select>
    
    <!-- ===== 휴게소 완성 정보 목록 조회 ===== -->
    <select id = "selectServiceareaGroupList"
            parameterType = "project.spring.travel.model.ServiceareaGroup"
            resultMap = "serviceareaGroup">
        <!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
        Select 
            servicearea_groupId, serviceareaName, direction, routeName, 
            csStat, foodBatchMenu, foodSalePrice, 
            imageUrl, imageThumbnailUrl, imageWidth, imageHeight, 
            oilCompany, oilGasolinePrice, oilDiselPrice, oilLpgYn, oilLpgPrice, 
            placeId, placeX, placeY, placePhone, 
            placeAddress, placeRoadAddress, placeUrl, 
            psName, themeItemName, themeDetail, serviceareaLike,
            Date_format(regDate, '%Y-%m-%d ') As `regDate`, 
            Date_format(editDate, '%Y-%m-%d') As `editDate` 
        From servicearea_group 
        
        <!--
            ===== Dynamic SQL 기능을 사용한 SQL구문의 조건분기 =====
            - JSP -> Service -> Mapper의 순서로 Beans 객체가 전달된다.
            - 전달받은 Beans객체에 포함한 name값이 null이나 공백이 아닐 경우에만
                Where절을 추가하도록 조건분기 기능을 사용한다.
        -->
        <where>
            <if test="serviceareaName != null and serviceareaName != ''">
                serviceareaName Like Concat('%', #{serviceareaName}, '%')
            </if>
        </where>

        Order By routeName Asc, serviceareaName Asc 
        <!--
            ===== SQL Limit절 + 내림차순 정렬 적용하기 =====
            - JSP에서 PageHelper를 통해 계산한 값을
                Member 객체에 설정하고,
                이 값이 다시 Mapper에게 전달되어 SQL의 Limit절이 구성된다.
        -->
        <if test="limitStart != null and listCount != null">
            Limit #{limitStart}, #{listCount}
        </if>
    </select>
    
    <!-- 휴게소 정보 좋아요 증가 -->
    <update id="updateServiceareaGroupByLikeUp"
        parameterType="project.spring.travel.model.ServiceareaGroup">
        UPDATE servicearea_group 
        SET 
            serviceareaLike = serviceareaLike + 1 
        WHERE servicearea_groupId = #{servicearea_groupId}
    </update>
    
    <!-- 휴게소 정보 좋아요 감소 -->
    <update id="updateServiceareaGroupByLikeDown"
        parameterType="project.spring.travel.model.ServiceareaGroup">
        UPDATE servicearea_group 
        SET 
            serviceareaLike = serviceareaLike - 1 
        WHERE servicearea_groupId = #{servicearea_groupId}
    </update>
    
    <!--
        ===== 전체 노선 수를 구하기 위한 기능 추가 =====
    -->
    <select id="selectRouteNameCount"
            parameterType="project.spring.travel.model.ServiceareaGroup"
            resultType="int">
        Select Count(distinct routeName)
        From servicearea_group
        
        <where>
            <if test="routeName != null and routeName != ''">
                routeName Like Concat('%', #{routeName}, '%')
            </if>
        </where>
    </select>
    
    <!-- ===== 노선 목록을 노선명으로 조회 ===== -->
    <select id = "selectRouteNameList"
            parameterType = "project.spring.travel.model.ServiceareaGroup"
            resultMap = "serviceareaGroup">
        <!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
        Select 
            distinct routeName
        From servicearea_group 
        
        <!--
            ===== Dynamic SQL 기능을 사용한 SQL구문의 조건분기 =====
            - JSP -> Service -> Mapper의 순서로 Beans 객체가 전달된다.
            - 전달받은 Beans객체에 포함한 name값이 null이나 공백이 아닐 경우에만
                Where절을 추가하도록 조건분기 기능을 사용한다.
        -->
        <where>
            <if test="routeName != null and routeName != ''">
                routeName Like Concat('%', #{routeName}, '%')
            </if>
        </where>

        Order By routeName Asc
        <!--
            ===== SQL Limit절 + 내림차순 정렬 적용하기 =====
            - JSP에서 PageHelper를 통해 계산한 값을
                Member 객체에 설정하고,
                이 값이 다시 Mapper에게 전달되어 SQL의 Limit절이 구성된다.
        -->
        <if test="limitStart != null and listCount != null">
            Limit #{limitStart}, #{listCount}
        </if>
    </select>
    
    <!--
        ===== 전체 휴게소 수를 노선명으로 구하기 위한 기능 추가 =====
    -->
    <select id="selectServiceareaGroupCountByRouteName"
            parameterType="project.spring.travel.model.ServiceareaGroup"
            resultType="int">
        Select Count(serviceareaName)
        From servicearea_group
        
        <where>
            <if test="routeName != null and routeName != ''">
                routeName Like Concat('%', #{routeName}, '%')
            </if>
        </where>
    </select>
    
    <!-- ===== 휴게소 완성 정보 목록을 노선명으로 조회 ===== -->
    <select id = "selectServiceareaGroupListByRouteName"
            parameterType = "project.spring.travel.model.ServiceareaGroup"
            resultMap = "serviceareaGroup">
        <!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
        Select 
            servicearea_groupId, serviceareaName, direction, routeName, 
            csStat, foodBatchMenu, foodSalePrice, 
            imageUrl, imageThumbnailUrl, imageWidth, imageHeight, 
            oilCompany, oilGasolinePrice, oilDiselPrice, oilLpgYn, oilLpgPrice, 
            placeId, placeX, placeY, placePhone, 
            placeAddress, placeRoadAddress, placeUrl, 
            psName, themeItemName, themeDetail, serviceareaLike,
            Date_format(regDate, '%Y-%m-%d ') As `regDate`, 
            Date_format(editDate, '%Y-%m-%d') As `editDate` 
        From servicearea_group 
        
        <!--
            ===== Dynamic SQL 기능을 사용한 SQL구문의 조건분기 =====
            - JSP -> Service -> Mapper의 순서로 Beans 객체가 전달된다.
            - 전달받은 Beans객체에 포함한 name값이 null이나 공백이 아닐 경우에만
                Where절을 추가하도록 조건분기 기능을 사용한다.
        -->
        <where>
            <if test="routeName != null and routeName != ''">
                routeName Like Concat('%', #{routeName}, '%')
            </if>
        </where>

        Order By routeName Asc
        <!--
            ===== SQL Limit절 + 내림차순 정렬 적용하기 =====
            - JSP에서 PageHelper를 통해 계산한 값을
                Member 객체에 설정하고,
                이 값이 다시 Mapper에게 전달되어 SQL의 Limit절이 구성된다.
        -->
        <if test="limitStart != null and listCount != null">
            Limit #{limitStart}, #{listCount}
        </if>
    </select>
    
    <!--
        ===== 전체 휴게소 수를 위치로 구하기 위한 기능 추가 =====
    -->
    <select id="selectServiceareaGroupCountByPlaceId"
            parameterType="project.spring.travel.model.ServiceareaGroup"
            resultType="int">
        Select Count(servicearea_groupId)
        From servicearea_group
        Where placeId in (${placeId})
    </select>
    
    <!-- ===== 휴게소 완성 정보 목록을 위치로 조회 ===== -->
    <select id = "selectServiceareaGroupListByPlaceId"
            parameterType = "project.spring.travel.model.ServiceareaGroup"
            resultMap = "serviceareaGroup">
        <!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
        Select 
            servicearea_groupId, serviceareaName, direction, routeName, 
            csStat, foodBatchMenu, foodSalePrice, 
            imageUrl, imageThumbnailUrl, imageWidth, imageHeight, 
            oilCompany, oilGasolinePrice, oilDiselPrice, oilLpgYn, oilLpgPrice, 
            placeId, placeX, placeY, placePhone, 
            placeAddress, placeRoadAddress, placeUrl, 
            psName, themeItemName, themeDetail, serviceareaLike,
            Date_format(regDate, '%Y-%m-%d ') As `regDate`, 
            Date_format(editDate, '%Y-%m-%d') As `editDate` 
        From servicearea_group 
        Where placeId in (${placeId})
        <!--
            ===== SQL Limit절 + 내림차순 정렬 적용하기 =====
            - JSP에서 PageHelper를 통해 계산한 값을
                Member 객체에 설정하고,
                이 값이 다시 Mapper에게 전달되어 SQL의 Limit절이 구성된다.
        -->
        <if test="limitStart != null and listCount != null">
            Limit #{limitStart}, #{listCount}
        </if>
    </select>
    
</mapper>